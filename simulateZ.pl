#!/usr/bin/perl -w
use strict;
use List::MoreUtils qw(uniq);
use Algorithm::Evolve::Util ':str';
use Math::Random;
use Math::Random qw(random_beta
                    random_chi_square
                    random_exponential
                    random_f
                    random_gamma
                    random_multivariate_normal
                    random_multinomial
                    random_noncentral_chi_square
                    random_noncentral_f
                    random_normal
                    random_permutation
                    random_permuted_index
                    random_uniform
                    random_poisson
                    random_uniform_integer
                    random_negative_binomial
                    random_binomial
                    random_seed_from_phrase
                    random_get_seed
                    random_set_seed_from_phrase
                    random_set_seed );

my $seqw="ATGGACAAGAAGGTGGTGCTGATCACAGGCTGCTCCTCGGGAATCGGTCTCAGCCTGGCTGTCCGGTTAGCATCTGACCCCGACAAAACATTCAAAGGTAACAGCCCACATCTACACACAATGATGGACTTTGTTGTATTTTCCGAGAGAGCTTGCACTGGGTAAGGGATCTGTGGTTAATCTGTGGTTTTAACTCCACGGAGACACTGTATAATAGTATGTAATGCTATACACTCATCAAGCACTTTATTAGAAACAGCACACTAATGCCAGGTAGGGCTTTCCTTTGCTCTCACAGCAGCTTCAGGTCATTGTGCATGCACAGATTCCACATGATGTTGGAAATATTCCTTTGAGATTCTGGTCCATGTTGACATGATCGATTGTGTTTAGTCTATGCCACAATGAGGAACCTGGCCAAGAAGGAGCGTCTTTTAGAGTGCGTGAAAGGCCTGCACAAGGACACCTTGGACATTCTCCAAATGGACGTGACTGACCGACAGTCCATTCTTGATGCAAGGGACAAGGTTGTGGAGAAGCGTGTGGACATTCTGGGTATGCCTAAGTGTCTGTGTGTTGTTAGGAAGATTGCAATTTCTGTACGTTAATGAGCTTTATCCTCACAACTTACAGTGTGTAATGCTGGTGTGGGTTGGATGGGGCCGCTGGAGCTGCAGTCCTTGGACTCCATGAGGCACATTCTGGAGGTCAACCTCTTAGGTACCATCCAGACCATTCAGGCCTTCCTACCAGAGATGAAGGCTGAGAGCCAGGGCCGCATTCTGGTCACTGGCAGCACCGGAGGGCTTCACGGTGAGACAAGCAAACGGTGGAGGAGTCTCTGAATGTCAACAGCATTCCACATGTGCAGTTTCTGTAATGATTTGATAGAAATCATGTAAACAAACCTTGGTAAGACTTGCTGCCATGCATGACATTGCCAAAATAACCCATCTCAGTGCTTTCTGTGTTCTCACAGGTCTCCCTTTTAATGAGGTGTACTGTGCCAGTAAATTTGCAATTGAGGGAGCATGTGAGAGTCTGGCTGTCCTCCTGCAACACTTCAATATCCAGTGAGTTTTGAAGCTTGCTGCATCTTGCTCCCTGAGTTTAGTGCTATTGGCTGTGTATGGTTTATTAATTTTTATATTGTTGATGGGGAGCGACTATTGATTTGATGCTTCATCCTGCAGTGTGAGTCTCATTGAGTGTGGTCCAGTCAACACTGACTTCCTGCTCAACCTGCAGAAGGCGGAGCTTGGGGATACAACTCACCAACAGGTTGATACCCGCACACTCAGCCTCTATGAAAAATACCTGCATCACTGTGGCTCAGTTTTCCAAAATGCAGCACAGGACACTGAGGACATTGTAAAGGTATGTTGTACATTGACAGCAGATCATAACTGCAGTAGTAAAATGTATTGATGAGTTTATCACAACATAAATAATATATAAAATTCAGTGTGACAGTATAAGAGCATCTCTAAATGTCACTGTTGTGTTTATTTTTGTCTCCAAGGTATTTCTAGATGCCATCCAGTCACCCAGCCCTGCATTCAGATACTTCACCAGTGGTGTCGTTCCACCTCTCACCCAACTGAAGATCACAGAGCCAGATGGCTCGCAGTGCATCCGTGCTATGAGTAAAATAATCTTCTCAGCTGAGGAACAATAA";
my $seqz="ATGGACAAGAAGGTGGTGCTGATCACAGGCTGCTCCTCGGGAATCGGTCTCAGCCTGGCTGTCCGGTTAGCATCTGACCCCGACAAAACATTCAAAGATAACAGCCCACATCTACACACAATGATGGACTTTGTTGTATTTTCCGAGAGAGCTTGCACTGGGTAAGGGATCTGTGGTTAATCTGTGGTTTTAACTCCACGGAGACACTGTATAATAGTATGTAATGCTATACACTCATCAAGCACTTTATTAGAAACAGCACACTAATGCCAGGTAGGGCTTTCCTTTGCTCTCACAGCAGCTTCAGGTCATTGTGCATGCACAGATTCCACATGATGTTGGAAATATTCCTTTGAGATTCTGGTCCATGTTGACATGATCGATTGTGTTTAGTCTATGCCACAATGAGGAACCTGGCCAAGAAGGAGCGTCTTTTAGAGTGCGTGAAAGGCCTGCACAAGGACACCTTGGACATTCTCCAAATGGACGTGACTGACCGACAGTCCATTCTTGATGCAAGGGACAAGGTTGTGGAGAAGCGTGTGGACATTCTGGGTATGCCTAAGTGTCTGTGTGTTGTTAGGAAGATTGCAATTTCTGTACGTTAATGAGCTTTATCCTCACAACTTACAGTGTGTAATGCTGGTGTGGGTTGGATGGGGCCGCTGGAGCTGCAGTCCTTGGACTCCATGAGGCACATTCTGGAGGTCAACCTCTTAGGTACCATCCAGACCATTCAGGCCTTCCTACCAGAGATGAAGGCTGAGAGCCAGGGCCGCATTCTGGTCACTGGCAGCACCGGAGGGCTTCACGGTGAGACAAGCAAACGGTGGAGGAGTCTCTGAATGTCAACAGCATTCCACATGTGCAGTTTCTGTAATGATTTGATAGAAATCATGTAAACAAACCTTGGTAAGACTTGCTGCCATGCATGACATTGCCAAAATAACCCATCTCAGTGCTTTCTGTGTTCTCACAGGTCTCCCTTTTAATGAGGTGTACTGTGCCAGTAAATTTGCAATTGAGGGAGCATGTGAGAGTCTGGCTGTCCTCCTGCAACACTTCAATATCCAGTGAGTTTTGAAGCTTGCTGCATCTTGCTCCCTGAGTTTAGTGCTATTGGCTGTGTATGGTTTATTAATTTTTATATTGTTGATGGGGAGCGACTATTGATTTGATGCTTCATCCTGCAGTGTGAGTCTCATTGAGTGTGGTCCAGTCAACACTGACTTCCTGCTCAACCTGCAGAAGGCGGAGCTTGGGGATACAACTCACCAACAGGTTGATACCCGCACACTCAGCCTCTATGAAAAATACCTGCATCACTGTGGCTCAGTTTTCCAAAATGCAGCACAGGACACTGAGGACATTGTAAAGGTATGTTGTACATTGACAGCAGATCATAACTGCAGTAGTAAAATGTATTGATGAGTTTATCACAACATAAATAATATATAAAATTCAGTGTGACAGTATAAGAGCATCTCTAAATGTCACTGTTGTGTTTATTTTTGTCTCCAAGGTATTTCTAGATGCCATCCAGTCACCCAGCCCTGCATTCAGATACTTCACCAGTGGTGTCGTTCCACCTCTCACCCAACTGAAGATCACAGAGCCAGATGGCTCGCAGTGCATCCGTGCTATGAGTAAAATAATCTTCTCAGCTGAGGAACAATAA";
my @bw=split(//,$seqw);
my @bz=split(//,$seqz);
my $cds="ATGGACAAGAAGGTGGTGCTGATCACAGGCTGCTCCTCGGGAATCGGTCTCAGCCTGGCTGTCCGGTTAGCATCTGACCCCGACAAAACATTCAAAGTCTATGCCACAATGAGGAACCTGGCCAAGAAGGAGCGTCTTTTAGAGTGCGTGAAAGGCCTGCACAAGGACACCTTGGACATTCTCCAAATGGACGTGACTGACCGACAGTCCATTCTTGATGCAAGGGACAAGGTTGTGGAGAAGCGTGTGGACATTCTGGTGTGTAATGCTGGTGTGGGTTGGATGGGGCCGCTGGAGCTGCAGTCCTTGGACTCCATGAGGCACATTCTGGAGGTCAACCTCTTAGGTACCATCCAGACCATTCAGGCCTTCCTACCAGAGATGAAGGCTGAGAGCCAGGGCCGCATTCTGGTCACTGGCAGCACCGGAGGGCTTCACGGTCTCCCTTTTAATGAGGTGTACTGTGCCAGTAAATTTGCAATTGAGGGAGCATGTGAGAGTCTGGCTGTCCTCCTGCAACACTTCAATATCCATGTGAGTCTCATTGAGTGTGGTCCAGTCAACACTGACTTCCTGCTCAACCTGCAGAAGGCGGAGCTTGGGGATACAACTCACCAACAGGTTGATACCCGCACACTCAGCCTCTATGAAAAATACCTGCATCACTGTGGCTCAGTTTTCCAAAATGCAGCACAGGACACTGAGGACATTGTAAAGGTATTTCTAGATGCCATCCAGTCACCCAGCCCTGCATTCAGATACTTCACCAGTGGTGTCGTTCCACCTCTCACCCAACTGAAGATCACAGAGCCAGATGGCTCGCAGTGCATCCGTGCTATGAGTAAAATAATCTTCTCAGCTGAGGAACAATAA";
my @cdsw=split(//,$cds);
my %code=(
"TTT"=>"F","TTC"=>"F",
"TTA"=>"L","TTG"=>"L","CTC"=>"L","CTA"=>"L","CTG"=>"L","CTT"=>"L",
"TCT"=>"S","TCC"=>"S","TCA"=>"S","TCG"=>"S","AGT"=>"S","AGC"=>"S",
"TAT"=>"Y","TAC"=>"Y",
"TAA"=>"TMC","TAG"=>"TMC","TGA"=>"TMC",
"TGT"=>"C","TGC"=>"C",
"TGG"=>"W",
"CCT"=>"P","CCC"=>"P","CCA"=>"P","CCG"=>"P",
"CAT"=>"H","CAC"=>"H",
"CAA"=>"Q","CAG"=>"Q",
"ATT"=>"I","ATC"=>"I","ATA"=>"I",
"ATG"=>"M",
"ACT"=>"T","ACC"=>"T","ACA"=>"T","ACG"=>"T",
"AAT"=>"N","AAC"=>"N",
"AAA"=>"K","AAG"=>"K",
"AGA"=>"R","AGG"=>"R","CGT"=>"R","CGC"=>"R","CGA"=>"R","CGG"=>"R",
"GTT"=>"V","GTC"=>"V","GTA"=>"V","GTG"=>"V",
"GCT"=>"A","GCC"=>"A","GCA"=>"A","GCG"=>"A",
"GAT"=>"D","GAC"=>"D",
"GAA"=>"E","GAG"=>"E",
"GGT"=>"G","GGC"=>"G","GGG"=>"G","GGA"=>"G",
);

my %base=(
"0"=>"A",
"1"=>"T",
"2"=>"C",
"3"=>"G"
);
my $t=0;
my $G=20000;
my $mu=$ARGV[2];#1E-5;
my $N=$ARGV[0];
my $R=$ARGV[3];#1E-3;
my $i="";
my $j="";
my $x="";
my $y="";
my $tmp="";
my $tmp1="";
my $tmp2="";
my %seq=();
my @tmpseq=();
my @tmpseqw=();
my @tmpseqz=();
my @tmpseqa=();
my %ha=();
my @switch=();
my $dif=0;
my $c=0;
my $piw="";
my $piz="";
my $pia="";
my $Fst="";
my $dxy="";
my $mutation=0;
my $recom=0;
my $r=$ARGV[1];
###初始化
print STDERR "Initialization begin...\t";
for $i (0 .. (4*$N-1)){
	$seq{0}{$i}{seq}=$seqw;
}
print STDERR "done\n";
###
$tmp1=$mu;$tmp1=~s/1E(-\d)/$1/;
$tmp2=$R;$tmp2=~s/1E(-\d)/$1/;
$tmp="Zsimulate".$tmp1.$tmp2."_".$N."_".$r.".out";
open OUT, ">$tmp";
print STDERR "generation\tpiz\n";

for $i (1 .. $G){	
	#print OUT $i,"\t";
	#	print STDERR "Generation ",$i,"\n";
	@tmpseqz=();
	$mutation=0;
	for $j (0 .. (4*$N-1)){
		push(@tmpseqz,$seq{$i-1}{$j}{seq})
	}
	#	print STDERR $#tmpseqw,"\t",$#tmpseqz,"\n";
	for $j (0 .. (4*$N-1)){
                $seq{$i-1}{$j}{seq}=();
	}
	for $j (0 .. 4*$N-1){
		$tmp=int(rand($#tmpseqz+1));
		@tmpseq=split(//,$tmpseqz[$tmp]);
		for $x (0 .. $#tmpseq){
			$y=random_poisson(1,$mu);
			if($y==0){
				$seq{$i}{$j}{seq}.=$tmpseq[$x];
			}
			elsif($y>=1){
				$mutation++;
				#print STDERR "MUTATION\n";
				$tmp = int(rand(4));
				$seq{$i}{$j}{seq}.=$base{$tmp};
			}
		}
	}
	##recombination
	$recom=0;
	for $j (0 .. 2*$N-1){
		$tmp1=$seq{$i}{$j}{seq};
		$tmp2=$seq{$i}{$j+2*$N}{seq};
		$dif=($#bz + 1 - str_agreement( $tmp1, $tmp2 ))/($#bz + 1);
		for $x (0 .. $#bz){
			$y=random_poisson(1,$R*(1-0.03*$dif));
			if($y>=1){
				$tmp=$x;
				$recom++;
				# print STDERR $tmp,"\n";
				$seq{$i}{$j}{seq}=substr($tmp1,0,$tmp).substr($tmp2,$tmp);
				$seq{$i}{$j+2*$N}{seq}=substr($tmp2,0,$tmp).substr($tmp1,$tmp);
				last;
			}
		}
	}

	##
	if($i%10==0){
	###pi
	#print STDERR "pi caculation begin\n";
		@tmpseqz=();
		for $j (0 .. (4*$N-1)){
			if(length($seq{$i}{$j}{seq})!=1678){die}
			push(@tmpseqz,$seq{$i}{$j}{seq});
		}
		$dif=0;$c=0;$piz=0;
		foreach $j (0 .. $#tmpseqz-1){
			foreach $x ($j+1 ..  $#tmpseqz){
				$c++;
				$dif+=($#bw + 1 - str_agreement( $tmpseqz[$j], $tmpseqz[$x] ))/($#bw + 1)
			}
		}
		
		$piz=$dif/$c;

		print OUT "Generation\t$i\n";
		@switch=();
		foreach $x (@tmpseqz){
			@tmpseq=split(//,$x);
			foreach $y (0..$#tmpseq){
				if($tmpseq[$y] ne $bw[$y]){
					push(@switch,$y)
				}
			}
		}
		my @uniq=sort{$a<=>$b} uniq @switch;
		#print STDERR "@switch","\n";
		#print STDERR "@uniq","\n";
		foreach $x (@uniq){
			$tmp=0;
			foreach $y (@tmpseqz){
				@tmpseq=split(//,$y);
				if($tmpseq[$x] ne $bw[$x]){
					$tmp++
				}
			}
			#if($tmp/($#tmpseqz+1) >0.8){
				print OUT $x,"\t",$tmp/($#tmpseqz+1),"\n";
			#}
		}
		
		print STDERR $i,"\t",$piz,"\n";
	}
}
close OUT;

